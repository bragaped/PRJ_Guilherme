/******************************************************************************/
/****         Generated by IBExpert 2007.05.03 18/08/2008 21:59:09         ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES ISO8859_1;

CREATE DATABASE 'D:\Projetos\Guilherme\Projeto Estoque\Banco\BDESTOQUE.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET ISO8859_1;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR GEN_GRUPO_ID;
SET GENERATOR GEN_GRUPO_ID TO 0;

CREATE GENERATOR GEN_ITENS_LANC_ID;
SET GENERATOR GEN_ITENS_LANC_ID TO 0;

CREATE GENERATOR GEN_LANCAMENTOS_ID;
SET GENERATOR GEN_LANCAMENTOS_ID TO 0;

CREATE GENERATOR GEN_LOG_ESTOQUE_ID;
SET GENERATOR GEN_LOG_ESTOQUE_ID TO 0;

CREATE GENERATOR GEN_PRODUTO_ID;
SET GENERATOR GEN_PRODUTO_ID TO 0;

CREATE GENERATOR GEN_USUARIO_ID;
SET GENERATOR GEN_USUARIO_ID TO 0;



/******************************************************************************/
/****                              Exceptions                              ****/
/******************************************************************************/

CREATE EXCEPTION ERWIN_CHILD_DELETE_RESTRICT 'Cannot DELETE Child table because Parent table does not exist.';

CREATE EXCEPTION ERWIN_CHILD_INSERT_RESTRICT 'Cannot INSERT Child table because Parent table does not exist.';

CREATE EXCEPTION ERWIN_CHILD_UPDATE_RESTRICT 'Cannot UPDATE Child table because Parent table does not exist.';

CREATE EXCEPTION ERWIN_PARENT_DELETE_RESTRICT 'Cannot DELETE Parent table because Child table exists.';

CREATE EXCEPTION ERWIN_PARENT_INSERT_RESTRICT 'Cannot INSERT Parent table because Child table exists.';

CREATE EXCEPTION ERWIN_PARENT_UPDATE_RESTRICT 'Cannot UPDATE Parent table because Child table exists.';



/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE GRUPO (
    GRU_COD  INTEGER NOT NULL,
    GRU_NOM  VARCHAR(45),
    GRU_OBS  VARCHAR(80)
);

CREATE TABLE ITENS_LANC (
    ITENS_LANC_COD  INTEGER NOT NULL,
    PRO_COD         INTEGER DEFAULT 0 NOT NULL,
    USE_COD         INTEGER NOT NULL,
    LANC_COD        INTEGER NOT NULL,
    NRO_NF          INTEGER NOT NULL,
    LANC_TIP        INTEGER NOT NULL,
    ITENS_QTDE      FLOAT DEFAULT 1,
    ITENS_VENDA     DOUBLE PRECISION DEFAULT 0,
    ITENS_CUSTO     DOUBLE PRECISION DEFAULT 0,
    ITENS_DESC      FLOAT DEFAULT 0
);

CREATE TABLE LANCAMENTOS (
    LANC_COD       INTEGER NOT NULL,
    NRO_NF         INTEGER NOT NULL,
    LANC_TIP       INTEGER DEFAULT 0 NOT NULL,
    USE_COD        INTEGER NOT NULL,
    LANC_SIT       INTEGER DEFAULT 0,
    LANC_DATA_MOV  DATE,
    LANC_DATA      DATE NOT NULL,
    VALOR_TOTAL    DOUBLE PRECISION DEFAULT 0
);

CREATE TABLE LOG_ESTOQUE (
    LOG_COD         INTEGER NOT NULL,
    ITENS_LANC_COD  INTEGER,
    USE_NOME        VARCHAR(8),
    LANC_COD        INTEGER,
    NRO_NF          INTEGER,
    LANC_TIP        INTEGER,
    MOTIVO          CHAR(5),
    DATA            DATE,
    QTDE            FLOAT,
    PRO_COD         INTEGER NOT NULL
);

CREATE TABLE PRODUTO (
    PRO_COD    INTEGER NOT NULL,
    GRU_COD    INTEGER,
    PRO_NOM    VARCHAR(45),
    PRO_PESO   FLOAT DEFAULT 0,
    PRO_UNI    CHAR(2),
    PRO_QTD    FLOAT DEFAULT 0,
    PRO_VENDA  DOUBLE PRECISION DEFAULT 0,
    PRO_CUSTO  DOUBLE PRECISION DEFAULT 0
);

CREATE TABLE USUARIO (
    USE_COD  INTEGER NOT NULL,
    NOME     VARCHAR(8) NOT NULL,
    SENHA    VARCHAR(8),
    USE_OBS  VARCHAR(40)
);



/******************************************************************************/
/****                             Primary Keys                             ****/
/******************************************************************************/

ALTER TABLE GRUPO ADD PRIMARY KEY (GRU_COD);
ALTER TABLE ITENS_LANC ADD PRIMARY KEY (ITENS_LANC_COD, PRO_COD, USE_COD, LANC_COD, NRO_NF, LANC_TIP);
ALTER TABLE LANCAMENTOS ADD PRIMARY KEY (USE_COD, LANC_COD, NRO_NF, LANC_TIP);
ALTER TABLE LOG_ESTOQUE ADD PRIMARY KEY (LOG_COD);
ALTER TABLE PRODUTO ADD PRIMARY KEY (PRO_COD);
ALTER TABLE USUARIO ADD PRIMARY KEY (USE_COD);


/******************************************************************************/
/****                             Foreign Keys                             ****/
/******************************************************************************/

ALTER TABLE ITENS_LANC ADD FOREIGN KEY (USE_COD, LANC_COD, NRO_NF, LANC_TIP) REFERENCES LANCAMENTOS (USE_COD, LANC_COD, NRO_NF, LANC_TIP);
ALTER TABLE ITENS_LANC ADD FOREIGN KEY (PRO_COD) REFERENCES PRODUTO (PRO_COD);
ALTER TABLE LANCAMENTOS ADD FOREIGN KEY (USE_COD) REFERENCES USUARIO (USE_COD);
ALTER TABLE LOG_ESTOQUE ADD FOREIGN KEY (PRO_COD) REFERENCES PRODUTO (PRO_COD);
ALTER TABLE PRODUTO ADD FOREIGN KEY (GRU_COD) REFERENCES GRUPO (GRU_COD);


/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE UNIQUE INDEX XPKGRUPO ON GRUPO (GRU_COD);
CREATE UNIQUE INDEX XPKITENS_LANC ON ITENS_LANC (ITENS_LANC_COD, PRO_COD, USE_COD, LANC_COD, NRO_NF, LANC_TIP);
CREATE UNIQUE INDEX XPKLANCAMENTOS ON LANCAMENTOS (USE_COD, LANC_COD, NRO_NF, LANC_TIP);
CREATE UNIQUE INDEX XPKLOG_ESTOQUE ON LOG_ESTOQUE (LOG_COD);
CREATE UNIQUE INDEX XPKPRODUTO ON PRODUTO (PRO_COD);
CREATE UNIQUE INDEX XPKUSUARIO ON USUARIO (USE_COD);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/


SET TERM ^ ;


/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: GRUPO_BI */
CREATE TRIGGER GRUPO_BI FOR GRUPO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.GRU_COD IS NULL) THEN
    NEW.GRU_COD = GEN_ID(GEN_GRUPO_ID,1);
END
^

/* Trigger: ITENS_LANC_BI */
CREATE TRIGGER ITENS_LANC_BI FOR ITENS_LANC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ITENS_LANC_COD IS NULL) THEN
    NEW.ITENS_LANC_COD = GEN_ID(GEN_ITENS_LANC_ID,1);
END
^

/* Trigger: LANCAMENTOS_BI */
CREATE TRIGGER LANCAMENTOS_BI FOR LANCAMENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.LANC_COD IS NULL) THEN
    NEW.LANC_COD = GEN_ID(GEN_LANCAMENTOS_ID,1);
END
^

/* Trigger: LOG_ESTOQUE_BI */
CREATE TRIGGER LOG_ESTOQUE_BI FOR LOG_ESTOQUE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.LOG_COD IS NULL) THEN
    NEW.LOG_COD = GEN_ID(GEN_LOG_ESTOQUE_ID,1);
END
^

/* Trigger: PRODUTO_BI */
CREATE TRIGGER PRODUTO_BI FOR PRODUTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.PRO_COD IS NULL) THEN
    NEW.PRO_COD = GEN_ID(GEN_PRODUTO_ID,1);
END
^

/* Trigger: TD_GRUPO */
CREATE TRIGGER TD_GRUPO FOR GRUPO
ACTIVE AFTER DELETE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* DELETE trigger on Grupo */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Grupo R/12 Produto ON PARENT DELETE RESTRICT */
    select count(*)
      from Produto
      where
        /*  Produto.Gru_Cod = OLD.Gru_Cod */
        Produto.Gru_Cod = OLD.Gru_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_DELETE_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TD_LANCAMENTOS */
CREATE TRIGGER TD_LANCAMENTOS FOR LANCAMENTOS
ACTIVE AFTER DELETE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* DELETE trigger on Lancamentos */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Lancamentos R/12 Itens_Lanc ON PARENT DELETE RESTRICT */
    select count(*)
      from Itens_Lanc
      where
        /*  Itens_Lanc.Use_Cod = OLD.Use_Cod and
            Itens_Lanc.Lanc_Cod = OLD.Lanc_Cod and
            Itens_Lanc.Nro_NF = OLD.Nro_NF and
            Itens_Lanc.Lanc_Tip = OLD.Lanc_Tip */
        Itens_Lanc.Use_Cod = OLD.Use_Cod and
        Itens_Lanc.Lanc_Cod = OLD.Lanc_Cod and
        Itens_Lanc.Nro_NF = OLD.Nro_NF and
        Itens_Lanc.Lanc_Tip = OLD.Lanc_Tip into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_DELETE_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TD_PRODUTO */
CREATE TRIGGER TD_PRODUTO FOR PRODUTO
ACTIVE AFTER DELETE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* DELETE trigger on Produto */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Produto R/9 Itens_Lanc ON PARENT DELETE RESTRICT */
    select count(*)
      from Itens_Lanc
      where
        /*  Itens_Lanc.Pro_Cod = OLD.Pro_Cod */
        Itens_Lanc.Pro_Cod = OLD.Pro_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_DELETE_RESTRICT;
    END

    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Produto R/8 Log_Estoque ON PARENT DELETE RESTRICT */
    select count(*)
      from Log_Estoque
      where
        /*  Log_Estoque.Pro_Cod = OLD.Pro_Cod */
        Log_Estoque.Pro_Cod = OLD.Pro_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_DELETE_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TD_USUARIO */
CREATE TRIGGER TD_USUARIO FOR USUARIO
ACTIVE AFTER DELETE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* DELETE trigger on Usuario */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Usuario R/4 Lancamentos ON PARENT DELETE RESTRICT */
    select count(*)
      from Lancamentos
      where
        /*  Lancamentos.Use_Cod = OLD.Use_Cod */
        Lancamentos.Use_Cod = OLD.Use_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_DELETE_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TI_ITENS_LANC */
CREATE TRIGGER TI_ITENS_LANC FOR ITENS_LANC
ACTIVE AFTER INSERT POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* INSERT trigger on Itens_Lanc */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Lancamentos R/12 Itens_Lanc ON CHILD INSERT RESTRICT */
    select count(*)
      from Lancamentos
      where
        /* NEW.Use_Cod = Lancamentos.Use_Cod and
           NEW.Lanc_Cod = Lancamentos.Lanc_Cod and
           NEW.Nro_NF = Lancamentos.Nro_NF and
           NEW.Lanc_Tip = Lancamentos.Lanc_Tip */
        NEW.Use_Cod = Lancamentos.Use_Cod and
        NEW.Lanc_Cod = Lancamentos.Lanc_Cod and
        NEW.Nro_NF = Lancamentos.Nro_NF and
        NEW.Lanc_Tip = Lancamentos.Lanc_Tip into numrows;
    IF (
      /*  */
      
      numrows = 0
    ) THEN
    BEGIN
      EXCEPTION ERWIN_CHILD_INSERT_RESTRICT;
    END

    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Produto R/9 Itens_Lanc ON CHILD INSERT RESTRICT */
    select count(*)
      from Produto
      where
        /* NEW.Pro_Cod = Produto.Pro_Cod */
        NEW.Pro_Cod = Produto.Pro_Cod into numrows;
    IF (
      /*  */
      
      numrows = 0
    ) THEN
    BEGIN
      EXCEPTION ERWIN_CHILD_INSERT_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TI_LANCAMENTOS */
CREATE TRIGGER TI_LANCAMENTOS FOR LANCAMENTOS
ACTIVE AFTER INSERT POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* INSERT trigger on Lancamentos */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Usuario R/4 Lancamentos ON CHILD INSERT RESTRICT */
    select count(*)
      from Usuario
      where
        /* NEW.Use_Cod = Usuario.Use_Cod */
        NEW.Use_Cod = Usuario.Use_Cod into numrows;
    IF (
      /*  */
      
      numrows = 0
    ) THEN
    BEGIN
      EXCEPTION ERWIN_CHILD_INSERT_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TI_LOG_ESTOQUE */
CREATE TRIGGER TI_LOG_ESTOQUE FOR LOG_ESTOQUE
ACTIVE AFTER INSERT POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* INSERT trigger on Log_Estoque */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Produto R/8 Log_Estoque ON CHILD INSERT RESTRICT */
    select count(*)
      from Produto
      where
        /* NEW.Pro_Cod = Produto.Pro_Cod */
        NEW.Pro_Cod = Produto.Pro_Cod into numrows;
    IF (
      /*  */
      
      numrows = 0
    ) THEN
    BEGIN
      EXCEPTION ERWIN_CHILD_INSERT_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TI_PRODUTO */
CREATE TRIGGER TI_PRODUTO FOR PRODUTO
ACTIVE AFTER INSERT POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* INSERT trigger on Produto */
DECLARE VARIABLE numrows INTEGER;
BEGIN
    /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
    /* Grupo R/12 Produto ON CHILD INSERT RESTRICT */
    select count(*)
      from Grupo
      where
        /* NEW.Gru_Cod = Grupo.Gru_Cod */
        NEW.Gru_Cod = Grupo.Gru_Cod into numrows;
    IF (
      /*  */
      
      numrows = 0
    ) THEN
    BEGIN
      EXCEPTION ERWIN_CHILD_INSERT_RESTRICT;
    END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TU_GRUPO */
CREATE TRIGGER TU_GRUPO FOR GRUPO
ACTIVE AFTER UPDATE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* UPDATE trigger on Grupo */
DECLARE VARIABLE numrows INTEGER;
BEGIN
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Grupo R/12 Produto ON PARENT UPDATE RESTRICT */
  IF
    /* OLD.Gru_Cod <> NEW.Gru_Cod */
    (OLD.Gru_Cod <> NEW.Gru_Cod) THEN
  BEGIN
    select count(*)
      from Produto
      where
        /*  Produto.Gru_Cod = OLD.Gru_Cod */
        Produto.Gru_Cod = OLD.Gru_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_UPDATE_RESTRICT;
    END
  END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TU_ITENS_LANC */
CREATE TRIGGER TU_ITENS_LANC FOR ITENS_LANC
ACTIVE AFTER UPDATE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* UPDATE trigger on Itens_Lanc */
DECLARE VARIABLE numrows INTEGER;
BEGIN
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Lancamentos R/12 Itens_Lanc ON CHILD UPDATE RESTRICT */
  select count(*)
    from Lancamentos
    where
      /* NEW.Use_Cod = Lancamentos.Use_Cod and
         NEW.Lanc_Cod = Lancamentos.Lanc_Cod and
         NEW.Nro_NF = Lancamentos.Nro_NF and
         NEW.Lanc_Tip = Lancamentos.Lanc_Tip */
      NEW.Use_Cod = Lancamentos.Use_Cod and
      NEW.Lanc_Cod = Lancamentos.Lanc_Cod and
      NEW.Nro_NF = Lancamentos.Nro_NF and
      NEW.Lanc_Tip = Lancamentos.Lanc_Tip into numrows;
  IF (
    /*  */
    
    numrows = 0
  ) THEN
  BEGIN
    EXCEPTION ERWIN_CHILD_UPDATE_RESTRICT;
  END

  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Produto R/9 Itens_Lanc ON CHILD UPDATE RESTRICT */
  select count(*)
    from Produto
    where
      /* NEW.Pro_Cod = Produto.Pro_Cod */
      NEW.Pro_Cod = Produto.Pro_Cod into numrows;
  IF (
    /*  */
    
    numrows = 0
  ) THEN
  BEGIN
    EXCEPTION ERWIN_CHILD_UPDATE_RESTRICT;
  END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TU_LANCAMENTOS */
CREATE TRIGGER TU_LANCAMENTOS FOR LANCAMENTOS
ACTIVE AFTER UPDATE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* UPDATE trigger on Lancamentos */
DECLARE VARIABLE numrows INTEGER;
BEGIN
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Lancamentos R/12 Itens_Lanc ON PARENT UPDATE RESTRICT */
  IF
    /* OLD.Use_Cod <> NEW.Use_Cod or 
       OLD.Lanc_Cod <> NEW.Lanc_Cod or 
       OLD.Nro_NF <> NEW.Nro_NF or 
       OLD.Lanc_Tip <> NEW.Lanc_Tip */
    (OLD.Use_Cod <> NEW.Use_Cod or 
     OLD.Lanc_Cod <> NEW.Lanc_Cod or 
     OLD.Nro_NF <> NEW.Nro_NF or 
     OLD.Lanc_Tip <> NEW.Lanc_Tip) THEN
  BEGIN
    select count(*)
      from Itens_Lanc
      where
        /*  Itens_Lanc.Use_Cod = OLD.Use_Cod and
            Itens_Lanc.Lanc_Cod = OLD.Lanc_Cod and
            Itens_Lanc.Nro_NF = OLD.Nro_NF and
            Itens_Lanc.Lanc_Tip = OLD.Lanc_Tip */
        Itens_Lanc.Use_Cod = OLD.Use_Cod and
        Itens_Lanc.Lanc_Cod = OLD.Lanc_Cod and
        Itens_Lanc.Nro_NF = OLD.Nro_NF and
        Itens_Lanc.Lanc_Tip = OLD.Lanc_Tip into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_UPDATE_RESTRICT;
    END
  END

  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Usuario R/4 Lancamentos ON CHILD UPDATE RESTRICT */
  select count(*)
    from Usuario
    where
      /* NEW.Use_Cod = Usuario.Use_Cod */
      NEW.Use_Cod = Usuario.Use_Cod into numrows;
  IF (
    /*  */
    
    numrows = 0
  ) THEN
  BEGIN
    EXCEPTION ERWIN_CHILD_UPDATE_RESTRICT;
  END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TU_LOG_ESTOQUE */
CREATE TRIGGER TU_LOG_ESTOQUE FOR LOG_ESTOQUE
ACTIVE AFTER UPDATE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* UPDATE trigger on Log_Estoque */
DECLARE VARIABLE numrows INTEGER;
BEGIN
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Produto R/8 Log_Estoque ON CHILD UPDATE RESTRICT */
  select count(*)
    from Produto
    where
      /* NEW.Pro_Cod = Produto.Pro_Cod */
      NEW.Pro_Cod = Produto.Pro_Cod into numrows;
  IF (
    /*  */
    
    numrows = 0
  ) THEN
  BEGIN
    EXCEPTION ERWIN_CHILD_UPDATE_RESTRICT;
  END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TU_PRODUTO */
CREATE TRIGGER TU_PRODUTO FOR PRODUTO
ACTIVE AFTER UPDATE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* UPDATE trigger on Produto */
DECLARE VARIABLE numrows INTEGER;
BEGIN
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Produto R/9 Itens_Lanc ON PARENT UPDATE RESTRICT */
  IF
    /* OLD.Pro_Cod <> NEW.Pro_Cod */
    (OLD.Pro_Cod <> NEW.Pro_Cod) THEN
  BEGIN
    select count(*)
      from Itens_Lanc
      where
        /*  Itens_Lanc.Pro_Cod = OLD.Pro_Cod */
        Itens_Lanc.Pro_Cod = OLD.Pro_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_UPDATE_RESTRICT;
    END
  END

  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Produto R/8 Log_Estoque ON PARENT UPDATE RESTRICT */
  IF
    /* OLD.Pro_Cod <> NEW.Pro_Cod */
    (OLD.Pro_Cod <> NEW.Pro_Cod) THEN
  BEGIN
    select count(*)
      from Log_Estoque
      where
        /*  Log_Estoque.Pro_Cod = OLD.Pro_Cod */
        Log_Estoque.Pro_Cod = OLD.Pro_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_UPDATE_RESTRICT;
    END
  END

  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Grupo R/12 Produto ON CHILD UPDATE RESTRICT */
  select count(*)
    from Grupo
    where
      /* NEW.Gru_Cod = Grupo.Gru_Cod */
      NEW.Gru_Cod = Grupo.Gru_Cod into numrows;
  IF (
    /*  */
    
    numrows = 0
  ) THEN
  BEGIN
    EXCEPTION ERWIN_CHILD_UPDATE_RESTRICT;
  END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: TU_USUARIO */
CREATE TRIGGER TU_USUARIO FOR USUARIO
ACTIVE AFTER UPDATE POSITION 0
AS
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* UPDATE trigger on Usuario */
DECLARE VARIABLE numrows INTEGER;
BEGIN
  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
  /* Usuario R/4 Lancamentos ON PARENT UPDATE RESTRICT */
  IF
    /* OLD.Use_Cod <> NEW.Use_Cod */
    (OLD.Use_Cod <> NEW.Use_Cod) THEN
  BEGIN
    select count(*)
      from Lancamentos
      where
        /*  Lancamentos.Use_Cod = OLD.Use_Cod */
        Lancamentos.Use_Cod = OLD.Use_Cod into numrows;
    IF (numrows > 0) THEN
    BEGIN
      EXCEPTION ERWIN_PARENT_UPDATE_RESTRICT;
    END
  END


  /* ERwin Builtin Thu Aug 07 22:09:33 2008 */
END
^

/* Trigger: USUARIO_BI */
CREATE TRIGGER USUARIO_BI FOR USUARIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.USE_COD IS NULL) THEN
    NEW.USE_COD = GEN_ID(GEN_USUARIO_ID,1);
END
^

SET TERM ; ^

